<?php

/**
*
* @author Carl McDade
* @copyright Copyright (c) 2010, Carl McDade
* @since 2010-02-19
* @version 0.2
* @license http://opensource.org/licenses/gpl-license.php GNU Public License
* @link http://www.drupal.se Drupal Sweden
*  
*/

/**
*
* Define some constants and globals that can be easily changed. Done here because there maybe multiple modules.
* taking care of different application sets. Start bootstrapping here.
*
* @todo create a more structured bootstrap file that can be used in other
* situations
*
*/

define('DOCROOT', dirname(__FILE__));
define('APP_MODULE', 'smart_inventory');
define('APP_PATH', drupal_get_path('module', APP_MODULE));
define('INI_FILENAME', $_SERVER['DOCUMENT_ROOT'] . base_path() . drupal_get_path('module', APP_MODULE) . "/_configuration/mvc.ini");

//require_once(DOCROOT . '/_controllers/Common.class.inc');

spl_autoload_register('mvc_autoload');



/*
* These global variables are necessary to carry values to the Classes nested
* in the module functions.
*
* @todo Module_list and hook_list should come from a configuration data source
* loaded by a Singleton Class
*
*/

/**
* ============================= Drupal hooks ===================================
* 
* This area should be keep to a minimum to  reduce the noise from Drupal. 
* 
*/

/**
*
* Call to the Drupal hook_menu
*
* Each call to a function from a path is exchanged through a single Class loader
* that loads the Class file and calls the Class methods. In most cases the called
* Class is a controller
*
* path and file arguments are not used here because we want to use a single dynamic
* file and class loader
*
* formatting only allows page activation under prefixed [app_trigger]/[controller]/[action]
*
* access is always open with the access callback set to true. Access control is
* left to mvc_access().
* @return array
*
*/



function mvc_menu()
{
 
    $items[ APP_MODULE . '/%/%' ] = array(
        'page callback' =>  'mvc_controller',
        'page arguments' => array(1, 2),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,

    );

    return $items;

} 

/**
*
* the Drupal access control is built into the menu system. This is statically cached, impossible to
* turn off and creates a performance hit if rebuilt on every page load. I want to use a more dynamic method
* So we need a simple access control function to handle URI action calls.
*
* @TODO Move the internals of mvc_access() to a _helper Class and add functionality
* for password authentication and URI wildcards.
*
*/

 // this function uses Drupals internals to set the acl in the database so that it can be accessed later
 // by the mvc_access() function.
 
function mvc_permission()
{
    return array(
    'access foo' =>  array(
      'title' => t('foo permissions'),
      'restrict access' => TRUE,
    ),
    'access baz' => array(
      'title' => t('baz permissions'),
      'restrict access' => TRUE,
    ),
    );
}



/**
* =================================== CONTROLLER ===============================
* @author Carl McDade
* @since 2010-02-14
* Start the contoller class using the autoloader function. The arguments are the Class name and method
* sent from the routing system. Controllers are contained in a function that sees Drupal and makes Drupal
* functions available to the Class.
*
* @todo Test the use of reflection API to aviod instantating the Class and to get more information on arguments
* needed for the method rather than forcing them to conform to the URI input.
*
* @return null
*/

function mvc_autoload($class)
{    
	// get a list of class file names. Allow only these and not Drupal class files in array		
	$path = DOCROOT . '/_controllers/' . $class . '.class.inc';
    $path = str_replace("\\", "/", $path);
    
    if(file_exists($path))
    {
        require_once($path);
    }
    
    return;
}

// get a list of class files in an array
function mvc_classes()
{
	//
}

function mvc_controller()
{
	
	$class = arg(1);
    $action = arg(2);

    // URI items after the /controller/action are loaded into the function as parameters
    $parameters = func_get_args();

    $access = mvc_access($class . '/' . $action);
    
    if($access == TRUE)
    {
        $controller = new $class();
        
        if(method_exists($controller, $action))
        {
            return $controller->$action($action);
        }
        else
        {
            return drupal_not_found();
        }

    }
    else
    {
        drupal_access_denied();
    }

}



/**
* ==================================== MODEL ===================================
* @author Carl McDade
* @since 2010-02-14
* Start the class loader function. The arguments are the Class name
*
* Add any database routines here and load the results into variables. Complicated
* solutions should be placed in a model file
*
* Add any business logic here and load the results to variables. Complicated
* solutions should be placed in a model file
*
*/


function mvc_model( $model, $mode, $parameter = NULL )
{

    if($model)
    {
        $model_path = DOCROOT . '/_models' . '/' . $model . '.model.inc';
        
        if(file_exists($model_path))
        {
            // models can return output if necessary preferably an array
            $output = require_once($_model_path);
        }
        else
        {
            trigger_error("Could not load model '{$model}' from file '{$model}.model.inc'", E_USER_WARNING);
            return false;
        }

    }

    $data = new $model;
    return $data->$mode($parameter);
}


/**
* ===================================== VIEW ===================================
* @author Carl McDade
* @since 2010-02-14
* This is where the views are registered to Drupals system. Using the hook_theme
* function a template is choosen from the _view directory.Be careful not to use
* the same template twice ie. both as parent and child template in the mvc_view().
* @TODO fix it so that duplicates cannot happen
*
*/


function mvc_view($view, $variables = NULL, $output = NULL)
{

    $template_path = DOCROOT . '/_views' . '/' . $view . '.tpl.php';
    
    if (file_exists($template_path) == false)
    {
        trigger_error("Template {$view} not found in ". $template_path);
        return false;
    }

    if(is_array($variables))
    {

        // Load variables here because they become part of the module not the theme template.php file.
        foreach ($variables as $key => $value)
        {
            $$key = $value;
        }

        // pre-load the mvc child template output with variables
       $output .= mvc_render_template($template_path, $variables);
    }

    // output everything into a parent template. Drupals theme system page is the default
   return $output;

}


/**
* @todo Update INI file methods to handle sections and add these to INI file
*
* the array of permission actually have to exists in the hook_perm fuction used by Drupal
* the reason I do this here is to enforce the ordered mvc routing conventions 
* over the chaotic Drupal ones. MVC usage hints to where and what is being used in the code
* while Drupal allows anything to hide anywhere.
*
*/
	
function mvc_access($uri)
{
	global $user;
	
	// get an array of set permissions for this user
	$permissions = user_role_permissions($user->roles); 
	
	// set up an instance of common to make the module hooks available
	// to this Drupal hook.
	$common = Common::get_instance();
	
	// get all the hook_access calls from classes into an array
	$authorize = $common->get_hooks('hook_access');
	
    // get a list of paths in an array
	$open = array_keys($authorize);    
    
    // let the present path through if it is not in the array of protected uri's
    if(!in_array($uri, $open))
    {
        return TRUE;
    }

    // check the uri's against the keys and add the access strings to an array
    foreach($authorize as $key => $value)
    {
        if($key == $uri)
        {          
            $result[] = array_flip( $value );           
            break;
        }
    }    
    
    // match keys that are the same as "authorized" for this user
    $allowed = array_intersect_key($result[0], $permissions[2]);
   
    if(count($allowed) > 0)
    {
        return TRUE;
    }
   
    // default is non-access
    return FALSE;

}

// Do our own render function because D7 adds the DRUPAL_ROOT which we don't need
function mvc_render_template($template_file, $variables)
{
  extract($variables, EXTR_SKIP); // Extract the variables to a local namespace
  ob_start(); // Start output buffering
  include $template_file; // Include the template file
  return ob_get_clean(); // End buffering and return its contents
}




?>
